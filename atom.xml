<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lee&#39;s House</title>
  
  <subtitle>Life is Fantastic</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jaylee.top/"/>
  <updated>2020-10-11T02:06:01.493Z</updated>
  <id>http://www.jaylee.top/</id>
  
  <author>
    <name>Lee Jay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CXX学习整理</title>
    <link href="http://www.jaylee.top/2020/10/11/CXX/C++%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%95%B4%E7%90%86/"/>
    <id>http://www.jaylee.top/2020/10/11/CXX/C++%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%95%B4%E7%90%86/</id>
    <published>2020-10-11T01:57:06.000Z</published>
    <updated>2020-10-11T02:06:01.493Z</updated>
    
    <content type="html"><![CDATA[<p>C++学习主要内容</p><ul><li>数据结构</li><li>指针与引用</li><li>类和对象</li><li>继承与重载与多态</li><li>函数</li><li>模板库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++学习主要内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;指针与引用&lt;/li&gt;
&lt;li&gt;类和对象&lt;/li&gt;
&lt;li&gt;继承与重载与多态&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;模板库&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="C++" scheme="http://www.jaylee.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>LiDAR_Perception阅读笔记二</title>
    <link href="http://www.jaylee.top/2020/10/10/LiDAR-Perception%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.jaylee.top/2020/10/10/LiDAR-Perception%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-10-10T07:18:16.000Z</published>
    <updated>2020-10-11T05:33:57.598Z</updated>
    
    <content type="html"><![CDATA[<p>认真学习,激光雷达处理方法和C++的处理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;认真学习,激光雷达处理方法和C++的处理&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
    
      <category term="ROS框架" scheme="http://www.jaylee.top/tags/ROS%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>PCL基础知识</title>
    <link href="http://www.jaylee.top/2020/10/10/PCL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.jaylee.top/2020/10/10/PCL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-10-10T03:00:00.000Z</published>
    <updated>2020-10-10T06:23:52.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PCL点云数据结构"><a href="#PCL点云数据结构" class="headerlink" title="PCL点云数据结构"></a>PCL点云数据结构</h2><p><a href="https://blog.csdn.net/qq_30815237/article/details/86475877?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">学习链接</a></p><h3 id="PointCLoud"><a href="#PointCLoud" class="headerlink" title="PointCLoud:"></a><strong>PointCLoud</strong>:</h3><ul><li><p>width(int),每一束激光扫描的点数</p></li><li><p>height(int), 激光的线数, 当点云为无序点云时候height=1</p></li><li><p>points(std::vector), 存储点的类型的向量,如XYZ,XYZI等,</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud;</span><br><span class="line">cloud.points[i].x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pcl::PointXYZ&gt; data = cloud.points;</span><br><span class="line"><span class="keyword">if</span>(!cloud.isOrganized())&#123;&#125;<span class="comment">//判断是不是有序点云</span></span><br><span class="line">is_dense(<span class="literal">true</span>)<span class="comment">//指定所有点都是稠密的,inf/nan</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//指针类型</span></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">ptr <span class="title">cloud2</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">cloud2-&gt;<span class="built_in">point</span>[i].x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>PointXYZ</p><p>结构: <code>float x,y,z</code> </p><p>用cloud.points[i].x访问</p></li><li><p>PointXYZI</p><p>结构:<code>float x,y,z,Indensity;</code></p><p>用cloud.points[i].Data[4]访问强度</p></li><li><p>PointXYZRGB</p><p>结构:<code>float x,y,z,rgb</code> rgb用一个浮点数表示</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PCL点云数据结构&quot;&gt;&lt;a href=&quot;#PCL点云数据结构&quot; class=&quot;headerlink&quot; title=&quot;PCL点云数据结构&quot;&gt;&lt;/a&gt;PCL点云数据结构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_30815237
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="PCL" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/PCL/"/>
    
    
      <category term="PCL" scheme="http://www.jaylee.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>ROS入门(二)</title>
    <link href="http://www.jaylee.top/2020/10/10/ROS%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
    <id>http://www.jaylee.top/2020/10/10/ROS%E5%85%A5%E9%97%A8(%E4%BA%8C)/</id>
    <published>2020-10-10T03:00:00.000Z</published>
    <updated>2020-10-10T06:23:31.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS接口编写"><a href="#ROS接口编写" class="headerlink" title="ROS接口编写"></a>ROS接口编写</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    ros::init(argc,argv,<span class="string">"listener"</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    ros::Subscriber subscriber = </span><br><span class="line">        nh.subscribe(<span class="string">"chatter"</span>,<span class="number">10</span>,callback);</span><br><span class="line">    <span class="comment">//ros::Publisher publiser = </span></span><br><span class="line">    <span class="comment">//  nh.advertise&lt;std_msgs::String&gt;("chatter",1);</span></span><br><span class="line">    <span class="comment">// publisher.publish(msg1);</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ROS接口编写&quot;&gt;&lt;a href=&quot;#ROS接口编写&quot; class=&quot;headerlink&quot; title=&quot;ROS接口编写&quot;&gt;&lt;/a&gt;ROS接口编写&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="工具技能" scheme="http://www.jaylee.top/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E8%83%BD/"/>
    
      <category term="ROS" scheme="http://www.jaylee.top/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E8%83%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://www.jaylee.top/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu常用问题记录</title>
    <link href="http://www.jaylee.top/2020/10/10/ubuntu%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.jaylee.top/2020/10/10/ubuntu%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-10T02:18:51.000Z</published>
    <updated>2020-10-10T02:37:25.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开机启动VPN脚本"><a href="#开机启动VPN脚本" class="headerlink" title="开机启动VPN脚本"></a>开机启动VPN脚本</h1><p>每次开机都要设置鼠标灵敏度和打开ssVPN操作,不如让这两行命令开机启动,省事.</p><p>1.在<code>/etc/init.d/</code>文件夹下添加一个脚本文件vpn_open.sh, </p><p>脚本格式如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides:          vpn_open.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start:    <span class="variable">$local_fs</span> <span class="variable">$network</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop:     <span class="variable">$local_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop:      0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: open vpn service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description:       open vpn service HK2.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line">nohup ss-local -c /home/lee/socketpro/HK2.json &amp;</span><br><span class="line">xset m 2</span><br></pre></td></tr></table></figure><p>2.将这个脚本添加到开机启动的服务中.<a href="https://blog.csdn.net/MakerCloud/article/details/81257953?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x start_test.sh #设置权限</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将脚本添加到启动脚本,90为优先级,数值越高优先级越低</span></span><br><span class="line">cd /etc/init.d/</span><br><span class="line">sudo update-rc.d start_test.sh defaults 90</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除服务方法</span></span><br><span class="line">cd /etc/init.d</span><br><span class="line">sudo update-rc.d -f start_test.sh remove</span><br></pre></td></tr></table></figure><h1 id="设置鼠标速度"><a href="#设置鼠标速度" class="headerlink" title="设置鼠标速度"></a>设置鼠标速度</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xset m N #N为速度,2即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开机启动VPN脚本&quot;&gt;&lt;a href=&quot;#开机启动VPN脚本&quot; class=&quot;headerlink&quot; title=&quot;开机启动VPN脚本&quot;&gt;&lt;/a&gt;开机启动VPN脚本&lt;/h1&gt;&lt;p&gt;每次开机都要设置鼠标灵敏度和打开ssVPN操作,不如让这两行命令开机启动,省事.&lt;/
      
    
    </summary>
    
    
      <category term="工具技能" scheme="http://www.jaylee.top/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Ubuntu小操作" scheme="http://www.jaylee.top/tags/Ubuntu%E5%B0%8F%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Cmake(一)</title>
    <link href="http://www.jaylee.top/2020/10/05/CMake%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.jaylee.top/2020/10/05/CMake%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-05T12:20:25.000Z</published>
    <updated>2020-10-10T05:05:11.033Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Cmake" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Cmake/"/>
    
    
      <category term="CMake" scheme="http://www.jaylee.top/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>ROS-launch启动文件 &amp; tf</title>
    <link href="http://www.jaylee.top/2020/10/05/ROS-launch-tf/"/>
    <id>http://www.jaylee.top/2020/10/05/ROS-launch-tf/</id>
    <published>2020-10-05T12:20:25.000Z</published>
    <updated>2020-10-05T13:16:38.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="launch"><a href="#launch" class="headerlink" title="launch"></a>launch</h1><p>可以启动多个节点, 并传入节点需要的参数变量等. 同时也不需要先启动roscore了. </p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span> = <span class="string">"lidar_perception"</span> <span class="attr">type</span> = <span class="string">"slot_detection"</span> <span class="attr">name</span> = <span class="string">"detecting slots"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span> = <span class="string">"slot_width"</span> <span class="attr">value</span>=<span class="string">"1.7"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"thershold_length"</span> <span class="attr">value</span>=<span class="string">"1.5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"lidar_perception"</span> <span class="attr">type</span>=<span class="string">"slot_detection"</span> <span class="attr">arg</span>=<span class="string">"$&#123;arg threshold_length&#125;"</span> <span class="attr">name</span> "<span class="attr">detection</span> <span class="attr">slots</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签node</strong>表示运行包pkg, 中的可执行cpp文件type (若使用py脚本需要添加.py后缀), 然后将这个节点的ROS名字取为name. 还可以添加需要传入的变量参数,用arg传入. </p><p><strong>标签param</strong>表示定义一些参数名及其值. <strong>rosparam</strong>可以传入参数文件中所有参数.</p><p><strong>标签arg</strong>定义launch内部使用的变量参数,可供其他使用.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"slot_detection/thresh_l"</span> <span class="attr">to</span>=<span class="string">"thresh_l"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$&#123;dirname&#125;/other.launch"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签remap</strong>重新定义topic(或其他?)所有资源的名字, </p><p><strong>标签include</strong>嵌套使用另外一个launch文件.</p><h1 id="tf坐标系"><a href="#tf坐标系" class="headerlink" title="tf坐标系"></a>tf坐标系</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;launch&quot;&gt;&lt;a href=&quot;#launch&quot; class=&quot;headerlink&quot; title=&quot;launch&quot;&gt;&lt;/a&gt;launch&lt;/h1&gt;&lt;p&gt;可以启动多个节点, 并传入节点需要的参数变量等. 同时也不需要先启动roscore了. &lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="工具技能" scheme="http://www.jaylee.top/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E8%83%BD/"/>
    
      <category term="ROS" scheme="http://www.jaylee.top/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E8%83%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://www.jaylee.top/tags/ROS/"/>
    
      <category term="launch" scheme="http://www.jaylee.top/tags/launch/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://www.jaylee.top/2020/09/20/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://www.jaylee.top/2020/09/20/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-09-20T12:39:57.000Z</published>
    <updated>2020-10-05T06:30:36.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符数组Char"><a href="#字符数组Char" class="headerlink" title="字符数组Char"></a>字符数组Char</h2><p>初始化：<code>char s[8] = &quot;China&quot;</code>最后一位以<code>‘/0’</code>保存结束标记符。</p><p>输入：<code>cin&gt;&gt;s</code>, 空格/Tab/回车都是输入字符串的结束符；<code>gets(s)</code>, 只有回车才结束. 自动补全’\0’. </p><p>输出: <code>cout&lt;&lt;s</code>, <code>puts(s)</code></p><p>赋值: <code>strcpy(s,&quot;China&quot;)</code></p><p>头文件: <code>#include &quot;stdio.h&quot;</code>包含了上述gets/puts函数;</p><p>​            <code>&quot;string.h&quot;</code>包含了字符串处理函数. <code>strlen(s);strcmp(s1,s2);strcpy(s,&quot;china&quot;)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">100</span>];</span><br><span class="line">    gets(s2);</span><br><span class="line">    <span class="built_in">puts</span>(s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准库–字符串string"><a href="#标准库–字符串string" class="headerlink" title="标准库–字符串string"></a>标准库–字符串string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"china"</span>;<span class="comment">// 初始化,赋值构造函数</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"China"</span>)</span></span>;<span class="comment">// 直接构造函数</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)&#123;<span class="comment">// 输入,以空格/tab/回车为结束符</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))<span class="comment">//输入, getline函数相当于符号"&gt;&gt;",参数为数据流cin,和保存的字符串变量</span></span><br><span class="line">        <span class="keyword">if</span>(!s.empty()) <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//非空才输出s</span></span><br><span class="line">    s1 = s1+<span class="string">"NO1"</span>;</span><br><span class="line">    s2 = s1 + s2 ;<span class="comment">//字符串连接</span></span><br><span class="line">    <span class="keyword">int</span> l = s.<span class="built_in">size</span>();<span class="comment">//返回长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回文字符串"><a href="#回文字符串" class="headerlink" title="回文字符串"></a>回文字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalnum</span>(ch))&#123;</span><br><span class="line">                s2 += <span class="built_in">tolower</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>; right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[left] != s[right])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符数组Char&quot;&gt;&lt;a href=&quot;#字符数组Char&quot; class=&quot;headerlink&quot; title=&quot;字符数组Char&quot;&gt;&lt;/a&gt;字符数组Char&lt;/h2&gt;&lt;p&gt;初始化：&lt;code&gt;char s[8] = &amp;quot;China&amp;quot;&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://www.jaylee.top/2020/09/15/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E9%80%92%E5%BD%92/"/>
    <id>http://www.jaylee.top/2020/09/15/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E9%80%92%E5%BD%92/</id>
    <published>2020-09-15T06:51:46.000Z</published>
    <updated>2020-10-05T06:30:15.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个函数调用他自己，就叫递归。</p><p>栈，每个函数运行时都会有的一篇存储空间。每个函数调用时都会增加一层栈。</p><p>搞清楚递归的<strong>终止条件</strong>，&amp;&amp;递归的<strong>转移关系</strong>。</p><h2 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><h2 id="NQueen"><a href="#NQueen" class="headerlink" title="NQueen"></a>NQueen</h2><h2 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;一个函数调用他自己，就叫递归。&lt;/p&gt;
&lt;p&gt;栈，每个函数运行时都会有的一篇存储空间。每个函数调用时都会增加一层栈。&lt;/p&gt;
&lt;p&gt;搞清楚递
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://www.jaylee.top/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/dp/"/>
    <id>http://www.jaylee.top/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/dp/</id>
    <published>2020-09-11T06:18:00.000Z</published>
    <updated>2020-10-05T06:30:49.767Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/dp/image-20200911214956202.png" alt="image-20200911214956202" style="zoom:150%;"><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><img src="/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/dp/image-20200909193353682.png" alt="image-20200909193353682" style="zoom:80%;"><p>斐波那契数列，可以递归/求通项/动态规划。</p><p>动态规划相当于从前往后推里，并只保留递推需要的值，即前两个数值，这样可以减小空间复杂度。</p><h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><blockquote><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票</p></blockquote><p>一次遍历或动态规划。动态规划即维护一个dp[i]列表，保存每一天的最大利润。而一次遍历相当于前者的优化，只保留最低价格，并比较当前卖出的利润是否大于最大利润。</p><h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6</span><br></pre></td></tr></table></figure><p>动态规划。 每个dp[i]中保存dp[i-1]与当前元素的和，如果dp[i-1]为负数，则不加上这个值。dp中最大的值就是最大子序和。</p><p><code>dp[i] = max(dp[i-1], nums[i]);</code></p><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><blockquote><p>示例 1：</p><p>输入：[1,2,3,1]<br>输出：4<br>解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>    偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p>自上而下，动态规划。n所房屋的最高金额等于考虑最后一所房屋要不要偷，若不进去，则与偷前n-1所房屋一致；若进去偷，则与偷前n-2所房屋的最高金额相关。即：</p><p><code>dp[i] = max(dp[i-1], dp[i-2]+nums[i];</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/dp/image-20200911214956202.png&quot; alt=&quot;image-20200911214956202&quot; style=&quot;zoom:150
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
      <category term="DP" scheme="http://www.jaylee.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>枚举</title>
    <link href="http://www.jaylee.top/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%9E%9A%E4%B8%BE/"/>
    <id>http://www.jaylee.top/2020/09/11/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%9E%9A%E4%B8%BE/</id>
    <published>2020-09-11T06:18:00.000Z</published>
    <updated>2020-10-05T06:30:22.582Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
  </entry>
  
  <entry>
    <title>点云处理算法综述</title>
    <link href="http://www.jaylee.top/2020/09/07/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E7%BB%BC%E8%BF%B0/"/>
    <id>http://www.jaylee.top/2020/09/07/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E7%BB%BC%E8%BF%B0/</id>
    <published>2020-09-07T06:15:29.000Z</published>
    <updated>2020-10-05T06:38:18.270Z</updated>
    
    <content type="html"><![CDATA[<p>自动驾驶对于检测算法有着比较特殊的要求：首先为了安全性考虑召回率要高，即不能漏检；其次因为检测到的物体是下游路径规划和运动决策算法的输入，这要求检测到的目标在连续帧中具有较好的稳定性，具体而言即在连续帧中检测到的同一个物体的类别、尺寸、位置和方向不能有剧烈的变化。与此同时因为激光点云的稀疏性，现有算法单用一帧点云数据无法在小物体、远处物体和被遮挡物体的检测上得到令人满意的结果。</p><p>开始考虑结合多种传感器数据的方法、结合多个激光雷达的方法以及结合连续多帧的方法。虽然在学术界的排行榜中现在最好的方法是基于深度学习的算法，但是在实际问题中数据的预处理、后处理等对最终结果有着至关重要的影响，而这些部分的算法往往需要根据数据和使用场景有针对性的设计。</p><h3 id="Range-Image-Graph"><a href="#Range-Image-Graph" class="headerlink" title="Range Image/Graph"></a>Range Image/Graph</h3><h3 id="VoxelNet"><a href="#VoxelNet" class="headerlink" title="VoxelNet"></a>VoxelNet</h3><p>将点云分布组织到体素网格中，再再鸟瞰图中应用深度学习框架。和二维图片检测相比VoxelNet不仅要给出物体中心的二维坐标和包围盒的长宽，还需要给出物体中心在Z轴的位置、物体的高度和物体在XY平面上的朝向。</p><p>缺点：体素太多的时候，会出现计算出错或者效率问题，一些学习框架不会考虑。三维卷积太消耗计算量无法实时。</p><p>类似的网络：pixorNet,pointNet++02</p><h3 id="多帧"><a href="#多帧" class="headerlink" title="多帧"></a>多帧</h3><p>Luo利用深度神经网络在鸟瞰图中通过连续帧的数据进行目标检测【20】。</p><p>其建立了一个“多入多出”的结构，即算法的输入是过去连续帧的鸟瞰图，而算法的输出是当前时刻和未来连续时刻的物体位置。Luo希望通过这种结构让网络不仅仅学习到物体在鸟瞰图中的形状，还可以学习到物体的速度、加速度信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自动驾驶对于检测算法有着比较特殊的要求：首先为了安全性考虑召回率要高，即不能漏检；其次因为检测到的物体是下游路径规划和运动决策算法的输入，这要求检测到的目标在连续帧中具有较好的稳定性，具体而言即在连续帧中检测到的同一个物体的类别、尺寸、位置和方向不能有剧烈的变化。与此同时因
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="LiDAR" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/LiDAR/"/>
    
    
      <category term="小知识" scheme="http://www.jaylee.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
      <category term="点云" scheme="http://www.jaylee.top/tags/%E7%82%B9%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://www.jaylee.top/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://www.jaylee.top/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-09-03T06:18:00.000Z</published>
    <updated>2020-10-05T06:30:19.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><img src="/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20200904091254966.png" alt="image-20200904091254966" style="zoom:80%;"><p>二叉树每个节点都有左右子树，利用递归关系：当前树深度=max(两子树深度最大值）+ 1.</p><p>递归初始化：空节点深度为空</p><h2 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2><img src="/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20200904092120931.png" alt="image-20200904092120931" style="zoom:80%;"><p>左子树的所有节点值都比当前节点小，右节点都比当前节点大。利用limit.h找到树的最大最小值，LONG_MIN, LONG_MAX，设置上下界。左子树为MIN~当前val，右子树为当前val–MAX。</p><p>递归关系：若当前节点不在上下界内，返回false；否则，递归验证左右子树，返回他俩的与值。</p><p>递归初始化：若当前节点为空，返回true。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的最大深度&quot;&gt;&lt;a href=&quot;#二叉树的最大深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最大深度&quot;&gt;&lt;/a&gt;二叉树的最大深度&lt;/h2&gt;&lt;img src=&quot;/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法</title>
    <link href="http://www.jaylee.top/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.jaylee.top/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F/</id>
    <published>2020-09-03T06:18:00.000Z</published>
    <updated>2020-10-05T06:30:25.799Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/sort-an-array/solution/python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/" target="_blank" rel="noopener">优秀连接</a></p><p><img src="/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F.png" alt="排序"></p><h2 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">56</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">43</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n =<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冒泡排序；</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">                &#123;<span class="keyword">int</span> temp = a[j];a[j] = a[j+<span class="number">1</span>];a[j+<span class="number">1</span>] = temp;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = a[j];a[j] = a[i];a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a[i];</span><br><span class="line">        <span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; temp &lt; a[j])&#123;</span><br><span class="line">            a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k =<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[k]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h3><img src="/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F/image-20200904105656076.png" alt="image-20200904105656076" style="zoom:80%;"><p>双指针。copy一个nums1内存空间res保存结果。</p><p>p&lt;q, 则p值放入res，p++;反之同。退出循环的条件，指针没到末尾</p><p>注意：p,q长度不一致，把未排完的依次放入res末尾。</p><h3 id="第一个错误版本"><a href="#第一个错误版本" class="headerlink" title="第一个错误版本"></a>第一个错误版本</h3><img src="/2020/09/03/CXX/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F/image-20200909183836225.png" alt="image-20200909183836225" style="zoom:80%;"><p>二分法查找。复杂度o(logn)</p><p>初始化边界：left为1，right为n. </p><p>判断中间值：isBadVersion(left+(right-left)/2)</p><p>退出循环的条件： left &lt; right</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-an-array/solution/python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="Leecode" scheme="http://www.jaylee.top/tags/Leecode/"/>
    
  </entry>
  
  <entry>
    <title>科普常识收集</title>
    <link href="http://www.jaylee.top/2020/07/25/%E7%A0%94%E7%A9%B6%E7%94%9F/CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://www.jaylee.top/2020/07/25/%E7%A0%94%E7%A9%B6%E7%94%9F/CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</id>
    <published>2020-07-25T08:15:29.000Z</published>
    <updated>2020-10-05T06:23:32.158Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="1-距离变换"><a href="#1-距离变换" class="headerlink" title="1 距离变换"></a>1 距离变换</h2></li><li><p><a href="https://blog.csdn.net/trent1985/article/details/18081761" target="_blank" rel="noopener">优秀链接</a>： </p></li><li><p>主要思想是通过表识空间点(目标点与背景点)距离的过程，最终将二值图像转换为灰度图像。边界模糊</p></li><li><p>假设一幅二值图像I，包含一个连通区域S，其中有目标集O和背景集B，距离图为D，则距离变换的公式:</p></li><li><p><img src="file:///C:/Users/LJ-pc/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg" alt="img"></p></li><li></li><li><p>欧氏距离</p></li><li><p>曼哈顿距离（街区距离） =<img src="file:///C:/Users/LJ-pc/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img"></p></li><li><p>契比雪夫距离（棋盘距离）=,可以理解为国际象棋的王后的走法：<img src="file:///C:/Users/LJ-pc/AppData/Local/Temp/msohtmlclip1/01/clip_image003.png" alt="img"></p></li><li><p><img src="file:///C:/Users/LJ-pc/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="计算机生成了可选文字: 8 7 6 5 45 3丰 3 2 1 5 5 5 5 5 5 4 4 4 4 4 4 4 5 b 3 3 3 3 3 3 4 5 c 2 2 2 2 3 4 5 d 222 111 21罾1 2 2 2 2 2 4 5 h 8 7 O&#39;ebyshev-- 1 2 3 4 5 e 1 2 3 4 5 f 1 2 3 4 5 g 6 5 4 2 1 1 1 1 1 1 1 1"></p></li><li><p>倒角距离（chamfer）：优化二值图像的距离运算速度。</p></li><li><h2 id="2-边缘图像检测"><a href="#2-边缘图像检测" class="headerlink" title="2 边缘图像检测"></a>2 边缘图像检测</h2></li><li><h2 id="3-直方图处理"><a href="#3-直方图处理" class="headerlink" title="3 直方图处理"></a>3 直方图处理</h2></li><li><h2 id="4-检测库位内是否占据"><a href="#4-检测库位内是否占据" class="headerlink" title="4 检测库位内是否占据"></a>4 检测库位内是否占据</h2></li><li><ol><li><ol><li>两条线之间的灰度直方图</li></ol></li></ol></li><li><p><img src="file:///C:/Users/LJ-pc/AppData/Local/Temp/msohtmlclip1/01/clip_image005.png" alt="img"></p></li><li><ol start="2"><li>距离变换后的边缘图寻找垂直轮廓的直方图</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;1-距离变换&quot;&gt;&lt;a href=&quot;#1-距离变换&quot; class=&quot;headerlink&quot; title=&quot;1 距离变换&quot;&gt;&lt;/a&gt;1 距离变换&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/tren
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="CV" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/CV/"/>
    
    
      <category term="小知识" scheme="http://www.jaylee.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
      <category term="CV" scheme="http://www.jaylee.top/tags/CV/"/>
    
      <category term="计算机视觉" scheme="http://www.jaylee.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>DeepPS</title>
    <link href="http://www.jaylee.top/2020/07/13/%E7%A0%94%E7%A9%B6%E7%94%9F/DeepPS/"/>
    <id>http://www.jaylee.top/2020/07/13/%E7%A0%94%E7%A9%B6%E7%94%9F/DeepPS/</id>
    <published>2020-07-13T13:56:04.000Z</published>
    <updated>2020-10-05T06:36:32.917Z</updated>
    
    <content type="html"><![CDATA[<p>研究的问题–&gt;创新贡献–&gt;主要内容–&gt;结果–&gt;总结</p><h2 id="研究问题"><a href="#研究问题" class="headerlink" title="研究问题"></a>研究问题</h2><ul><li>引出: 视觉检测库位重要, 但是干扰因素多鲁棒性不好, 本文要解决这问题.</li></ul><h2 id="创新贡献"><a href="#创新贡献" class="headerlink" title="创新贡献"></a>创新贡献</h2><ol><li>DeepPS, 一个DCNN网络, 可以解决标记点的识别/ 分类.</li><li>建立了便于学习的数据集.</li></ol><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;研究的问题–&amp;gt;创新贡献–&amp;gt;主要内容–&amp;gt;结果–&amp;gt;总结&lt;/p&gt;
&lt;h2 id=&quot;研究问题&quot;&gt;&lt;a href=&quot;#研究问题&quot; class=&quot;headerlink&quot; title=&quot;研究问题&quot;&gt;&lt;/a&gt;研究问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引出: 视觉检测库位重
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="深度学习" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DeepPs" scheme="http://www.jaylee.top/tags/DeepPs/"/>
    
  </entry>
  
  <entry>
    <title>Python深度学习笔记(一)</title>
    <link href="http://www.jaylee.top/2020/07/13/%E7%A0%94%E7%A9%B6%E7%94%9F/python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://www.jaylee.top/2020/07/13/%E7%A0%94%E7%A9%B6%E7%94%9F/python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</id>
    <published>2020-07-13T10:22:41.000Z</published>
    <updated>2020-10-05T06:38:33.024Z</updated>
    
    <content type="html"><![CDATA[<p>待整理:</p><ul><li>卷积层池化层</li><li>梯度下降</li><li>pytorch</li><li>numpy</li></ul><p>学习网站:B站莫烦python</p><p><code>namedtuple()</code>:是产生具有命名字段的元组的工厂函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待整理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积层池化层&lt;/li&gt;
&lt;li&gt;梯度下降&lt;/li&gt;
&lt;li&gt;pytorch&lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习网站:B站莫烦python&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namedtuple()&lt;/code&gt;:是产生
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="深度学习" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.jaylee.top/tags/Python/"/>
    
      <category term="深度学习" scheme="http://www.jaylee.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>How to read a paper</title>
    <link href="http://www.jaylee.top/2020/07/10/%E7%A0%94%E7%A9%B6%E7%94%9F/howtoreadapaper/"/>
    <id>http://www.jaylee.top/2020/07/10/%E7%A0%94%E7%A9%B6%E7%94%9F/howtoreadapaper/</id>
    <published>2020-07-10T07:17:49.000Z</published>
    <updated>2020-10-05T06:28:09.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编码格式UTF-8与中文"><a href="#编码格式UTF-8与中文" class="headerlink" title="编码格式UTF-8与中文"></a>编码格式UTF-8与中文</h2><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><h2 id="《How-to-read-a-paper》"><a href="#《How-to-read-a-paper》" class="headerlink" title="《How to read a paper》"></a>《How to read a paper》</h2><h3 id="读什么"><a href="#读什么" class="headerlink" title="读什么"></a>读什么</h3><blockquote><p><strong>第一阶段是看论文中是否有感兴趣的东西。</strong>AI论文含有摘要，其中可能有内容的介绍，但是也有可能没有或者总结得不好，因此需要你跳读，这看一点那看一点，了解作者究竟做了些什么。内容目录（the table of contents）、结论部分（conclusion）和简介（introduction）是三个重点。如果这些方法都不行，就只好顺序快速浏览了。一旦搞清楚了论文的大概和创新点，就可以决定是否需要进行第二阶段了。</p><p><strong>第二阶段，要找出论文真正具有内容的部分。</strong>很多15页的论文可以重写为一页左右的篇幅；因此需要你寻找那些真正激动人心的地方，这经常隐藏于某个地方。（Key）论文作者从其工作中所发现的感兴趣的地方，未必是你感兴趣的，反之亦然。</p><p><strong>最后，如果觉得该论文确实有价值，返回去通篇精读。</strong>读论文时要牢记几个问题：“我应该如何利用该论文？”“真的像作者宣称的那样么？”“如果……会发生什么？”。理解论文得到了什么结论并不等同于理解了该论文。理解论文，就要了解论文的目的，作者所作的选择（很多都是隐含的），假设和形式化是否可行，论文指出了怎样的方向，论文所涉及领域都有哪些问题，作者的研究中持续出现的难点模式是什么，论文所表达的策略观点是什么，诸如此类。</p></blockquote><h3 id="记什么"><a href="#记什么" class="headerlink" title="记什么"></a>记什么</h3><p>思路：研究问题–&gt;创新点–&gt;解决方法–&gt;结果–&gt;总结</p><p>自己要思考精读一篇文献，</p><ul><li>文章研究的问题是什么？该问题的范畴是什么？进行了何种假设？</li><li>文章如何针对该问题进行解决的？创新之处在哪？</li><li>研究的具体方法是什么？用到了哪些工具手段？</li><li>结果如何？哪些得到了征明？</li><li>总结，可以参考和不足之处在哪？</li></ul><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编码格式UTF-8与中文&quot;&gt;&lt;a href=&quot;#编码格式UTF-8与中文&quot; class=&quot;headerlink&quot; title=&quot;编码格式UTF-8与中文&quot;&gt;&lt;/a&gt;编码格式UTF-8与中文&lt;/h2&gt;&lt;h2 id=&quot;CUDA&quot;&gt;&lt;a href=&quot;#CUDA&quot; cla
      
    
    </summary>
    
    
      <category term="研究生" scheme="http://www.jaylee.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
    
      <category term="方法论" scheme="http://www.jaylee.top/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>cmake</title>
    <link href="http://www.jaylee.top/2020/07/08/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/CXX%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/"/>
    <id>http://www.jaylee.top/2020/07/08/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/CXX%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</id>
    <published>2020-07-08T12:57:06.000Z</published>
    <updated>2020-10-10T05:47:16.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="g-和cmake-make"><a href="#g-和cmake-make" class="headerlink" title="g++和cmake,make"></a>g++和cmake,make</h1><p><a href="http://blog.sina.com.cn/s/blog_74a459380102uxlz.html" target="_blank" rel="noopener">学习链接</a></p><p>任何一个文本程序生成可执行文件的步骤都是:</p><ol><li>编辑器编写源代码,.cpp</li><li>编译器编译代码生成目标文件,.o文件</li><li>链接器链接各个目标文件,生成可执行文件,.exe</li></ol><p>由于很多cpp相互关联,一个一个编译就很麻烦,于是出现了利用makefile规则文件自动编译这些cpp. 但是makefile的编写也很麻烦,于是又出现了cmake工具自动编写makefile.</p><p>流程如下:</p><blockquote><p>源文件–&gt;CmakeLists–&gt;cmake–&gt;makefiles–&gt;make–&gt;.exe可执行文件.</p></blockquote><p>其中gcc和g++在make阶段编译和链接文件,g++在gcc的基础上默认关联了C++库。</p><h1 id="cmake一个helloworld实例"><a href="#cmake一个helloworld实例" class="headerlink" title="cmake一个helloworld实例"></a>cmake一个helloworld实例</h1><p><a href="https://www.cnblogs.com/haijian/p/12039160.html" target="_blank" rel="noopener">https://www.cnblogs.com/haijian/p/12039160.html</a></p><img src="/2020/07/08/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/CXX%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/1365039-20191214155830875-1005241267.png" alt="1365039-20191214155830875-1005241267" style="zoom:50%;"><h2 id="PCL点云库从入门到精通"><a href="#PCL点云库从入门到精通" class="headerlink" title="PCL点云库从入门到精通"></a>PCL点云库从入门到精通</h2><p>由于《PCL点云库从入门到精通》配套代码只有C++语言，不能直接用于ROS平台，遂可先在Ubuntu中编译学习。</p><ol><li>在source文件夹（含有cpp，CMake，pcd）中新建文件夹build：<code>cd source/;mkdir build/</code></li><li>编译source文件夹中的cpp代码：<code>cd build/; cmake ..</code></li><li>生成可执行文件：<code>make</code></li><li>运行可执行文件：`./execute_name</li></ol><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p><a href="https://cmake.org/cmake/help/v3.1/" target="_blank" rel="noopener">官网教程</a></p><p> <a href="https://blog.csdn.net/AdamShan/article/details/82901295" target="_blank" rel="noopener"><strong>ROS：依赖文件和环境</strong></a><br>  <a href="https://www.cnblogs.com/Jessica-jie/p/6520481.html" target="_blank" rel="noopener"><strong>CMakeList详细解读</strong></a><br> 视频讲解的更加基础。<br> CMakeLists.txt文件是CMake构建系统的输入，在这里我们不会详细讨论CMake的写法（因为它本身可以很复杂），我们大致熟悉一下我们常用的CMake的语法：</p><p><code>SET(CMAKE_BUILD_TYPE Release)</code>: 指定编译类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin) #指定可执行文件生成目录</span><br><span class="line">set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)#指定链接文件生成目录</span><br></pre></td></tr></table></figure><p><code>include_directories(${PROJECT_SOURCE_DIR}/include)</code> : 添加头文件存放的目录</p><p><code>add_executable(helloworld src/helloworld.cpp src/main.cpp)</code>:选择要编译的程序文件</p><p><code>target_link_libraries(myProject a.cpp)</code>: 将二者链接起来</p><p><code>cmake_minimum_required：</code>需要的CMake的最低版本<br><code>project():</code>包的名称<br><code>find_package()</code> 查找建构是需要的其他 CMake/Catkin 包<br><code>add_message_files() add_service_files() add_action_files</code> 生成Message/Service/Action<br><code>generate_messages()</code> 调用消息生成<br><code>catkin_package()</code> 指定包的构建信息<br><code>add_library()/add_executable()/target_link_libraries()</code> 用于构建的库，可执行代码</p><p>同样的，在<code>CMakeList</code>中，我们通过<code>find_package</code>查找这三个包的路径，然后将三个包添加到 <code>CATKIN_DEPENDS</code>, 在使用pcl库前，需要将PCL库的路径链接，通过<code>link_directories( $ {PCL_LIBRARY_DIRS})</code>来完成，并在最后的<code>target_link_libraries</code>中添加<code>${PCL_LIBRARIES}</code>。</p><p> <code>package.xml</code>的内容很简单，实际上就是这个包的描述文件， <code>build_depend</code> 和 <code>run_depend</code> 两个描述符分别指定了程序包编译和运行的依赖项，通常是所用到的库文件的名称。 在这里我们指定了三个编译和运行时依赖项，分别是<code>roscpp</code>（编写C++ ROS节点），<code>sensor_msgs</code>（定义了激光雷达的msg），<code>pcl_ros</code>（连接ROS和pcl库）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;g-和cmake-make&quot;&gt;&lt;a href=&quot;#g-和cmake-make&quot; class=&quot;headerlink&quot; title=&quot;g++和cmake,make&quot;&gt;&lt;/a&gt;g++和cmake,make&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.sin
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="CMake" scheme="http://www.jaylee.top/tags/CMake/"/>
    
      <category term="C++编译" scheme="http://www.jaylee.top/tags/C-%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>CXX学习笔记（二）</title>
    <link href="http://www.jaylee.top/2020/07/08/CXX/CXX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://www.jaylee.top/2020/07/08/CXX/CXX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</id>
    <published>2020-07-08T09:57:06.000Z</published>
    <updated>2020-10-11T07:16:31.733Z</updated>
    
    <content type="html"><![CDATA[<p>对于书籍《数据结构与算法分析——C++语言描述第四版》的学习笔记</p><h1 id="指针pointor和引用-amp"><a href="#指针pointor和引用-amp" class="headerlink" title="指针pointor和引用&amp;"></a>指针pointor和引用&amp;</h1><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p><code>IntCell *m</code>是关于m的申明，m是指针变量，指向一个IntCell对象，m的值是指向对象的地址，此时尚未初始化。</p><p>初始化（动态创建）：</p><p><code>m = new Intcell();</code></p><p><code>m = new Intcell{};//C++11</code></p><p><code>m = new Intcell;</code></p><p>当通过new操作符分配地址的对象不再被引用时候，必须进行delete进行垃圾回收，否则指针所占用的内存将会一直被丢失得不到利用知道程序终止。</p><p><code>delete m</code></p><h2 id="amp-取地址操作符，引用"><a href="#amp-取地址操作符，引用" class="headerlink" title="&amp; 取地址操作符，引用"></a>&amp; 取地址操作符，引用</h2><h3 id="左值引用"><a href="#左值引用" class="headerlink" title="左值引用"></a>左值引用</h3><ul><li><p>给复杂的名称取别名</p><p><code>auto &amp; List = theLists[myhash(x,theLists.size())]</code></p><p>这样对List进行操作就是对原对象进行操作，若不加引用则是对拷贝对象进行操作，原内容并无变化。</p></li><li><p>范围for循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让arr数组中每个变量加1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> X:arr)</span><br><span class="line">    ++X;<span class="comment">//不可行,x拷贝了每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x:arr)</span><br><span class="line">    ==x;<span class="comment">//可行</span></span><br></pre></td></tr></table></figure></li><li><p>避免不必要的拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = findMax(arr);</span><br><span class="line"><span class="keyword">auto</span> &amp;x = findMax(arr);<span class="comment">//没有对数组中的最大值进行拷贝</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello"</span>;<span class="comment">//x,y,str都是左值,2,hello是右值</span></span><br><span class="line"><span class="built_in">string</span> &amp; bad = <span class="string">"hello"</span>;<span class="comment">//错误,此乃左值引用,"hello"为不可修改的右值</span></span><br><span class="line"><span class="built_in">string</span> &amp;&amp; good = <span class="string">"hello"</span>;<span class="comment">//合法</span></span><br></pre></td></tr></table></figure><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>对于输入到函数的参数对象：</p><blockquote><p>对于小的不该被函数改变的对象,可以采取<strong>传值调用.</strong></p><p>对于大的不该被函数改变的复制代价昂贵的对象,应采取<strong>传常量引用调用</strong></p><p>对于所有可以被函数改变的对象,应该采取<strong>传引用调用</strong>.</p></blockquote><p>常用的传值调用将实参复制到形参,对于大的对象效率低,且不能改变实参。而采用传引用调用就可以在函数内部改变传入的实参，且不会复制代价。若输入参数不希望改变且较大，这使用传常量引用调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">randomItem</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; arr)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>传值返回。</p><p>传常量引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Largetype &amp; randomItem2（<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Largetype&gt; &amp; arr)</span><br><span class="line">&#123;...&#125;</span><br><span class="line">Largetype a = randomItem(vec);<span class="comment">//返回值发生了复制</span></span><br><span class="line">Largetype b = randomItem2(vec);<span class="comment">//复制</span></span><br><span class="line">Largetype &amp; c =randomItem2(vec);<span class="comment">//没有复制</span></span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="初始化表列："><a href="#初始化表列：" class="headerlink" title="初始化表列："></a>初始化表列：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：membervalue&#123;initalValue&#125;&#123;&#125;<span class="comment">//比如数据成员为const型，因此只能在初始化表列中初始化。</span></span><br></pre></td></tr></table></figure><h2 id="explicit构造函数"><a href="#explicit构造函数" class="headerlink" title="explicit构造函数"></a>explicit构造函数</h2><p>英文原意“明确的不含糊的”，为了申明隐式的类型转换是不可行的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">IntCell</span><span class="params">(<span class="keyword">int</span> initialValue = <span class="number">0</span>)</span></span></span><br><span class="line">    : membervalue&#123;initalValue&#125;&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">const</span><span class="comment">//常成员函数，访问函数，表示不改变对象数据成员</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> membervalue;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//修改函数，可修改数据成员，但是不能改变常对象。</span></span></span><br><span class="line"><span class="function">    </span>&#123;membervalue = x;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> membervalue;</span><br></pre></td></tr></table></figure><p>举例explicit的作用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntCell N;</span><br><span class="line">N = <span class="number">20</span>; <span class="comment">//类型不匹配，但是C++隐式类型转换会先创建临时IntCell对象，再赋值给N。</span></span><br><span class="line"><span class="comment">//而添加explicit后就会指出这个问题</span></span><br></pre></td></tr></table></figure><h2 id="构造函数类型"><a href="#构造函数类型" class="headerlink" title="构造函数类型"></a>构造函数类型</h2><p>当数据成员为指针类型时，默认的几类构造函数将不起作用，他们只是对指针地址进行了<strong>浅拷贝</strong>,而我们需要的是对指向的内容进行<strong>深拷贝</strong>,因此需要自己写:</p><ul><li><p>析构函数</p></li><li><p>复制构造函数</p></li><li><p>移动构造函数</p></li><li><p>拷贝赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IntCell &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> IntCell &amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)</span><br><span class="line">        *membervalue  = *rhs.membervalue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>移动复制</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于书籍《数据结构与算法分析——C++语言描述第四版》的学习笔记&lt;/p&gt;
&lt;h1 id=&quot;指针pointor和引用-amp&quot;&gt;&lt;a href=&quot;#指针pointor和引用-amp&quot; class=&quot;headerlink&quot; title=&quot;指针pointor和引用&amp;amp;&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="编程学习" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://www.jaylee.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C/"/>
    
    
      <category term="C++" scheme="http://www.jaylee.top/tags/C/"/>
    
  </entry>
  
</feed>
